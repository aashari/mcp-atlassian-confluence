# .cursorrules for Boilerplate MCP Server Development

## Project Context

- **Project Name**: `@aashari/boilerplate-mcp-server`
- **Version**: 1.1.2
- **Description**: A TypeScript-based MCP (Model Context Protocol) server template for exposing IP address lookup capabilities to AI clients (e.g., Claude Desktop).
- **Technology Stack**:
  - Node.js v22.14.0+
  - TypeScript with NodeNext module resolution
  - MCP SDK v1.7.0 (`@modelcontextprotocol/sdk`)
  - Bundling via `tsup` into CommonJS (`dist/index.cjs`)
- **Last Updated**: March 14, 2025

## Project Setup

- **Entry Point**: `src/index.ts`
- **Build Command**: `tsup src/index.ts --format cjs --dts` (generates `dist/index.cjs`, `dist/index.d.cts`)
- **Execution**:
  - Local: `npm start`
  - Remote: `npx -y @aashari/boilerplate-mcp-server`
- **Version Management**: Ensure consistency between `package.json` and `src/index.ts` with:
  ```bash
  npm run update-version <new-version>
  ```

## MCP Server Functionality

### Tools

- **Tool Name**: `get_ip_details`
- **Definition**: `src/tools/ipaddress.tool.ts`
- **Parameters**: Optional `ipAddress` (validated by Zod)
- **Returns**: Structured IP details as plain text

### Resources

- **Resource Name**: `ip://current`
- **Definition**: `src/resources/ipaddress.resource.ts`
- **Functionality**: Provides the current device's IP details as a `text/plain` resource

### Data Flow

- Controllers (`src/controllers/`) handle business logic
- Services (`src/services/`) handle external API calls (IP data from `vendor.ip-api.com`)
- Responses formatted by controllers and returned through MCP tools and resources

## Guidelines for AI Assistance

### Code Style

- **TypeScript**: Follow strict NodeNext resolution (`tsconfig.json`)
- **Project Structure**:
  - Controllers (`src/controllers/`)
  - Services (`src/services/`)
  - Tools (`src/tools/`) – include Zod schema definitions
  - Resources (`src/resources/`)
  - Utilities (`src/utils/`) – shared helpers (e.g., logging)
- **Formatting**: Adhere to Prettier rules (`.prettierrc`):
  - Tabs: 4 spaces, use tabs
  - Single quotes
  - Trailing commas
- **Documentation**: Use JSDoc comments on all public methods/functions

### MCP Implementation

- **Tool Registration Example**:
  ```typescript
  server.tool(
      'get_ip_details',
      'Fetch IP details',
      IpAddressToolArgs.shape,
      async (args) => {
          const result = await ipAddressController.get(args.ipAddress);
          return { content: [{ type: 'text', text: result.content }] };
      },
  );
  ```
- **Resource Registration Example**:
  ```typescript
  server.resource(
      'Current IP',
      'ip://current',
      { description: 'Current IP details' },
      async () => {
          const data = await ipAddressController.get();
          return { contents: [{ uri: 'ip://current', text: data.content, mimeType: 'text/plain' }] };
      },
  );
  ```
- Use `logger.debug` for internal tracing and debugging

### Best Practices

- **Input Validation**: Always validate inputs in controllers (IP format, optional fields)
- **Error Handling**: Use try-catch in async methods, log via `logger.error`
- **Version Consistency**: Sync versioning across `package.json` and `src/index.ts` using provided scripts
- **Build Optimization**: Leverage `tsup` for efficient bundling

### Debugging & Testing

- Test using `npm run inspector` to validate STDIO transport
- Log essential events like server start and tool/resource registration
- Ensure the generated shebang (`#!/usr/bin/env node`) is present in `dist/index.cjs` for compatibility with `npx`
- Run unit tests regularly (`npm test`) and verify code coverage (`npm run test:coverage`)

## CI/CD Workflow

- Utilize provided GitHub Actions configuration (`.github/workflows/ci-cd.yml`):
  - Checks formatting (`prettier`)
  - Lints (`eslint`)
  - Builds and runs unit tests
  - Detects and manages semantic versioning, publishing, and tagging in GitHub Packages

## Objective

Assist developers in efficiently maintaining, extending, and debugging the MCP server while following best practices and project standards.
