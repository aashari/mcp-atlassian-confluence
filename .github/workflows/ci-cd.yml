name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  # Step 1: Run formatting, linting, and build checks
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check formatting
        run: npm run format:check
      
      - name: Lint code
        run: npm run lint
      
      - name: Build package
        run: npm run build
        
      - name: Run tests
        run: npm test
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Step 2: Check if version has changed
  check-version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      
      - name: Check if package.json version changed
        id: check
        run: |
          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ -z "$CURRENT_VERSION" ]; then
            echo "::error::Could not read current version from package.json"
            exit 1
          fi
          echo "::notice::Current version: $CURRENT_VERSION"
          
          # Get the previous commit on main
          git fetch origin main
          
          # Check if package.json was modified in the last commit
          if git diff --name-only HEAD^ HEAD | grep -q "package.json"; then
            # Get the previous version
            PREVIOUS_VERSION=$(git show HEAD^:package.json | node -p "JSON.parse(require('fs').readFileSync(0)).version")
            if [ -z "$PREVIOUS_VERSION" ]; then
              echo "::error::Could not read previous version from package.json"
              exit 1
            fi
            echo "::notice::Previous version: $PREVIOUS_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "::notice::Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "::notice::Version unchanged"
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "::notice::package.json not modified in the last commit"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  # Step 3: Publish to GitHub Packages only when version has changed
  publish:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to allow tag creation
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@aashari'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          if git fetch --tags && git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "::notice::Tag v$VERSION already exists, skipping tag creation"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::Tag v$VERSION does not exist, will create it"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create version tag
        if: steps.check_tag.outputs.tag_exists != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.check-version.outputs.version }} -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin v${{ needs.check-version.outputs.version }} 